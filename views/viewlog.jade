doctype 5
html
	head
		meta(charset='utf-8')
		title BusWolves RealTime Log Supplier 
		script(src='http://static.baixing.net/media/js/jquery-1.7.2.min.js')
		style
			body, input {
				font-family: 'Microsoft Yahei';
				font-size: 14px;
				line-height: 1.5;
			}
			header, section {
				margin: 1em 0;
			}
			nav ul {
				list-style: none;
				padding-left: 0;
			}
			nav form input[type="submit"] {
				margin-left: 12em;
			}
			textarea#fn, input#re {
				display:block;
			}
			#logs {
				position: fixed;
				bottom: 0;
				left: 24%;
				right: 0;
				top: 0;
				overflow: auto;
				color: white;
				background: black;
				font-family: Consolas, 'Courier New', monospace;
				font-size: 12px;
				line-height: 1.5;
				white-space: nowrap;
				list-style: none;
				padding-left: 0;
			}
			#logs li {
				-webkit-transition: height 0.5s, color 0.5s;
				height: 1.5em;
			}
			#logs li[hidden] {
				display: list-item;
				height: 0;
				color: transparent;
			}
		script
			var logs, autoScroll
			window.onload = function() {
				logs = document.getElementById('logs')
				autoScroll = document.getElementById('auto-scroll')
			}
			var srcList = []
			function reset() {
				while (src = srcList.pop()) {
					src.close()
				}
				logs.innerHTML = ''
			}
			function listen(url) {
				var source = new EventSource(url)
				srcList.push(source)
				source.onmessage = processMessage
			}
			function processMessage(evt) {
				var li = document.createElement('li')
				if (filterPattern && !filterPattern.test(evt.data) ||
					filterFunction && !filterFunction(evt)) li.hidden = true
				li.appendChild(document.createTextNode(evt.data))
				li.dataset.type = evt.type
				li.dataset.lastEventId = evt.lastEventId
				li.dataset.timeStamp = evt.timeStamp
				logs.appendChild(li)
				if (autoScroll.checked) li.scrollIntoView()
			}
			function updateLogs() {
				var node = logs.lastChild
				while (node) {
					node.hidden = filterPattern && !filterPattern.test(node.textContent) ||
						filterFunction && !filterFunction({
							data: node.textContent,
							type: node.dataset.type,
							lastEventId: node.dataset.lastEventId,
							timeStamp: node.dataset.timeStamp
						})
					node = node.previousSibling
				}
			}
			function eachSelectedChannel(fn) {
				var list = document.querySelectorAll('#bus li')
				for (var i = 0; i < list.length; i++) {
					var li = list[i]
					var checkbox = li.querySelector('input[type="checkbox"]')
					var channel = li.querySelector('output')
					var filter = li.querySelector('input[type="search"]')
					if (checkbox.checked) {
						fn(channel, filter)
					}
				}
			}
	body
		header
			nav
				form#bus
					ul
						each url in urls
							li
								label
									input(type='checkbox', checked)
									output #{url}
								input(type='search',value='shanghai\.baixing\.com.*ershouqiche',size='40')	//加上默认值，免得一点就刮掉。。。
					input(type='submit', value='般若波罗蜜！')
					label
						input#auto-scroll(type='checkbox', checked)
						| 滚
					script
						document.getElementById('bus').addEventListener('submit', function(evt) {
							reset()
							eachSelectedChannel(function(channel, filter){
								var url = channel.value + encodeURIComponent(filter.value)
								console.log(url)
								listen(url)
							})
							evt.preventDefault()
						})
				div#filters
					p
						input#apply-re(type='checkbox', checked)
						label(for='apply-re') 正则过滤
						input#use-re(type='button', value='传送门')
						input#re(type='search')
					p
						input#apply-fn(type='checkbox')
						label(for='apply-fn') 函数过滤
						input#use-fn(type='button', value='传送门')
						textarea#fn(cols=40, rows=8)
							|function filter(event) {
							|	return event.type === 'message' &&
							|		event.data.match(/.+/) &&
							|		event.timeStamp > Date.now() - 600000000
							|}
					script
						var filterPattern, filterFunction
						var filterInput = document.getElementById('re')
						filterInput.addEventListener('input', function(evt) {
							if (document.getElementById('apply-re').checked) {
								try {
									filterPattern = new RegExp(evt.target.value)
									updateLogs()
								} catch(e) {
									//console.error(e)
								}
							}
						})
						document.getElementById('apply-re').addEventListener('click', function() {
							if (this.checked) {
								try {
									filterPattern = new RegExp(document.getElementById('re').value)
									updateLogs()
								} catch(e) {
									alert(e)
								}
							} else {
								filterPattern = null
								updateLogs()
							}
						})
						document.getElementById('apply-fn').addEventListener('click', function() {
							if (this.checked) {
								try {
									filterFunction = new Function('return ' + document.getElementById('fn').value)()
									updateLogs()
								} catch(e) {
									alert(e)
								}
							} else {
								filterFunction = null
								updateLogs()
							}
						})
						document.getElementById('use-re').addEventListener('click', function() {
							if (filterPattern)
								eachSelectedChannel(function(channel, filter){
									filter.value = filterPattern.source
								})
						})
						document.getElementById('use-fn').addEventListener('click', function() {
							if (filterFunction)
								eachSelectedChannel(function(channel, filter){
									filter.value = filterFunction
								})
						})
		section
			ol#logs
